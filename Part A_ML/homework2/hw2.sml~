(*  Requirements:
1. 11 SML functions (not counting local helper functions),
       4 - "name substitutions",
       7 - a made-up solitaire card game
2. Must use pattern-matching.
3. May not use the functions null, hd, tl, isSome, or valOf,
   nor anything containing a # character or features not used in class (e.g., mutation)
4. List order does not matter unless specifically stated in the problem
5. Do not miss the "Important Caveat" and "Assessment" after the "Type Summary".
 *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)

fun all_except_option (str, strlist) =
    case strlist of
	[] => NONE
      | head::tail => if same_string(str, head)
		      then SOME tail
		      else case all_except_option(str, tail) of
			       NONE => NONE
			     | SOME strlist' => SOME(head::strlist')

fun get_substitutions1 (sub, s) =
    case sub of
	[] => []
      | head::tail => case all_except_option(s, head) of
			  NONE => get_substitutions1(tail, s)
			| SOME strlist => strlist @ get_substitutions1(tail, s)
    
fun get_substitutions2 (sub, s) =
    let fun f(sub, acc) =
	    case sub of
		[] => acc
	      | head::tail => case all_except_option(s, head) of
				  NONE => f(tail, acc)
				| SOME strlist => f(tail, acc @ strlist)
    in f(sub, []) end

fun similar_names (sub, {first=a, middle=b, last=c}) =
    let fun f(aux) =
	    case aux of
		[] => []
	      | head::tail => {first=head, middle=b, last=c}::f(tail)
    in f(a::get_substitutions2(sub, a)) end

(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)
